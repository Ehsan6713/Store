// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Store.Persistence;

#nullable disable

namespace Store.Persistence.Migrations
{
    [DbContext(typeof(StoreDbContext))]
    partial class StoreDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Store.Domain.Attachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Format")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Store.Domain.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 503, DateTimeKind.Local).AddTicks(9759),
                            Name = "Samsung"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 503, DateTimeKind.Local).AddTicks(9775),
                            Name = "Lg"
                        },
                        new
                        {
                            Id = 3,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 503, DateTimeKind.Local).AddTicks(9776),
                            Name = "IPhone"
                        },
                        new
                        {
                            Id = 4,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 503, DateTimeKind.Local).AddTicks(9777),
                            Name = "Lenovo"
                        },
                        new
                        {
                            Id = 5,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 503, DateTimeKind.Local).AddTicks(9779),
                            Name = "HP"
                        });
                });

            modelBuilder.Entity("Store.Domain.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 504, DateTimeKind.Local).AddTicks(2655),
                            Name = "Cell Phone"
                        },
                        new
                        {
                            Id = 2,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 504, DateTimeKind.Local).AddTicks(2663),
                            Name = "laptop"
                        });
                });

            modelBuilder.Entity("Store.Domain.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Store.Domain.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Store.Domain.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 505, DateTimeKind.Local).AddTicks(115),
                            FirstName = "Javad",
                            Gender = (byte)1,
                            LastName = "Sagheb"
                        });
                });

            modelBuilder.Entity("Store.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Stock")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 5,
                            CategoryId = 2,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 505, DateTimeKind.Local).AddTicks(4947),
                            Description = "Processor: Intel Core i5-1235U, 10 x 1.30 GHz with Turbo Boost up to 10 x 4.40 GHz\r\nDisplay: 39 cm (15.6 inches), anti-glare, 1920 x 1080 pixels Full HD IPS\r\nMemory: 16GB DDR4 RAM Hard Drive: 1000GB SSD\r\nOperating system: Windows 11\r\nFeatures: Full HD display, Intel UHD graphics, HDMI, card reader, no drive, USB Type-C",
                            Stock = 0L,
                            Title = "HP i5"
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 1,
                            CategoryId = 1,
                            CreateTime = new DateTime(2024, 9, 5, 2, 2, 41, 505, DateTimeKind.Local).AddTicks(4957),
                            Description = "For worry-free use: free warranty extension to 3 years - valid for customers who are resident in Germany\r\nEverything from your smartphone, all with AI: With the Galaxy S24 Ultra, you can easily edit photos, interpret calls in real time, and turn your notes into a clear summary¹ ² ³ ⁴.\r\nHigh resistance thanks to titanium: robustness, scratch resistance, water and dust protection thanks to Corning Gorilla Armor, the Galaxy S24 Ultra is ready for adventure, write, type and navigate with the integrated S Pen on the flat display\r\n200MP details that compete with reality: High resolution and AI processing, detects objects and reduces noise, zoom in the action, even at night - thanks to 1.6 times larger pixels and tele-OIS with larger angle6 8 / 9\r\nMobile gameplay: Fast computing power and almost twice the cooling system of the S23 Ultra – for a smooth graphics experience, high capacity battery and high energy efficiency for long gaming sessions6 ¹⁰ ¹¹ ¹ ¹²\r\nA bright adaptive Dynamic AMOLED display: 2,600 nits peak brightness, Redesigned Vision Booster improves contrast and colour representation for an impressive experience, reduced reflections and improved optical clarity thanks to Corning Gorilla Armor",
                            Stock = 0L,
                            Title = "s24"
                        });
                });

            modelBuilder.Entity("Store.Domain.Attachment", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Store.Domain.Product", null)
                        .WithMany("Attachments")
                        .HasForeignKey("ProductId");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.Brand", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.Category", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.Order", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.OrderDetail", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("Store.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Store.Domain.Person", b =>
                {
                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.Product", b =>
                {
                    b.HasOne("Store.Domain.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Store.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Domain.Person", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("Store.Domain.Product", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
